\ null gr:new var, mygraph \ create a new graph
\ mygraph @ \ place on stack
\ mygraph @ "living room" gr:+node  \ add a node


needs console/loaded

0 var, current_node
[] var, available_items
[] var, inventory_list
"" var, input_string

\ set up graph (map) from datafile
needs datafile

with: datafile
  advtitle @ var, title
  title @ . cr \ Print title
  advmap @
  gr:new var, adventuremap      \ create adventuremap from JSON
  cr
  ;with


: find 
  \ item array --  item bool
  false -rot                \ put false to bottom
  ( over s:= if "true"  break  \ bring item to TOS for comparison --> item bool 
                else
                then ) a:each!
  drop              \ drop array
  if 2drop "true"    \ put true on TOS
  then ;

: found
  find ;

: inventory 
  \ --
  "INVENTORY" . cr
  "You have: " . cr
   inventory_list @
   a:len 0 > if
            ( . cr ) a:each! cr 
            else
            "Nothing here" . cr 
            then

  drop ;     \ drop list and index


: take
  \ item array -- 
  over swap  \ get copy of item to bottom
  found if
        dup dup
        "You have a " . . cr
        available_items @ swap a:-   \ remove from available items
        drop
        inventory_list @ a:len rot a:! \ add to end of inventory
        else
        "There is no " . . " here." . cr  
        then 
        drop ;

: drop_item
  \ item --
  dup \ item item
  inventory_list @ 
  found if
          dup dup . " dropped." . cr
          inventory_list @ swap a:- drop
          available_items @ a:len rot a:!
          drop
        else
          "You do not have a " . . cr 
        then ;  \ drop array

\ copy available_items back to location items
\


: get_exits
  \ -- map
  \ return a map (dictionary) {direction:description} of exits from a location
  adventuremap @ gr:nodes current_node @ a:@
  -rot 2drop   \ remove graph(map) and list of nodes from stack
   \ leaving just current node
  current_node @ m:@ "exits" m:@  \ Select value for "exits" key 
  -rot 2drop \ drop unwanted stack entries leaaving dict
;

: display_exits
  \ map -- 
  \ map (dict) of exits at location
  get_exits
  "looking around, you can see " . cr
  ( . cr drop ) m:each
  drop
;

: look 
  \ -- 
  [] available_items ! \ clear items
  adventuremap @ gr:nodes current_node @ a:@ 
  \ fetch item at current node
  current_node @ m:@ "description" m:@ . cr \ get and pri    nt description
  "you can see: " . cr
  "items" m:@ dup ( . cr ) a:each \ Print each item in th    e items array
  drop drop drop   \ clear top of stack 
  available_items @ swap a:+ \ store found items in avail    able_items
  2drop 2drop drop \ clear the stack
  display_exits
;

: get_input
  \ -- 
  "" input_string ! \ clear the input string 
  repeat 
    con:key dup input_string @ swap s:+ 
    input_string ! input_string @ . space 
    32 = 
    until!
;   \ Places input string into input_string


: app:main
  \ requires console
  with: con
  bright cyan onBlack

  look
  "knife" available_items @ take
  inventory
  "knife"   drop_item 
  inventory
  \ available_items @ . cr
  "What would you like to do? " . cr
  get_input

  input_string @ .
  bye ;










\ TODO set up console for I/O
\ TODO write movement 
\ 
